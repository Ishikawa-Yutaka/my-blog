---
// src/layouts/BlogPostLayout.astro
import { NORMALIZED_BASE_URL, getPath } from '../env';
const { frontmatter } = Astro.props;

// カテゴリー名の日本語マッピング
const categoryNames = {
  web: { en: 'Web', ja: 'ウェブ' },
  photo: { en: 'Photo', ja: '写真' },
  stroll: { en: 'Stroll', ja: '散歩' },
  succulent: { en: 'Succulent', ja: '多肉植物' }
};

const category = categoryNames[frontmatter.category] || { en: 'Unknown', ja: '不明' };
---
<main>
    <article class="blog-post">
        <div class="header-wrapper">
          <header class="post-header">
            <a class="category-link" href={getPath(`blog/${frontmatter.category}`)}>
              <div class="category-info" data-category={frontmatter.category}>
                {category.en}<span>- {category.ja}</span>
              </div>
            </a>
            <h1 class="post-title">
              {frontmatter.title}
            </h1>
            <time class="post-date" datetime={frontmatter.date.toISOString()}>
              {frontmatter.date.toLocaleDateString('ja-JP')}
            </time>
            {frontmatter.image && (
              <img src={getPath(frontmatter.image)} alt={frontmatter.title} class="post-eyecatch" />
            )}
          </header>
        </div>
      <div class="post-content" data-category={frontmatter.category}>
        <slot />
      </div>

      <nav class="post-navigation">
        <a href={getPath('blog/web')} class={frontmatter.category === 'web' ? 'current' : ''}>Web</a>
        <a href={getPath('blog/photo')} class={frontmatter.category === 'photo' ? 'current' : ''}>Photo</a>
        <a href={getPath('blog/stroll')} class={frontmatter.category === 'stroll' ? 'current' : ''}>Stroll</a>
        <a href={getPath('blog/succulent')} class={frontmatter.category === 'succulent' ? 'current' : ''}>Succulent</a>
      </nav>
    </article>
  </main>


<style>
/* ブログ詳細ページ用のスタイル */
  .category-info {
    font-family: "M PLUS 1", sans-serif;
    font-size: 2.5rem;
    font-weight: 100;
    letter-spacing: 0.04em;
    color: var(--text-color);
    display: inline-block;
    margin-bottom: 0.5em;
    position: fixed;
    top: 87px;
    left: 4vw;
    z-index: 10000;
    height: 49px;
    padding: 0 3px;
    background-color: rgba(255, 255, 255, 0.7); 
    /* 背景を10px分ぼかす */
    backdrop-filter: blur(6px);
    -webkit-backdrop-filter: blur(6px); /* Safari向けのベンダープレフィックス */
  }

  .category-info::first-letter{
    font-size: 3rem;
    color: var(--category-web);
  }

  .category-link{
    display: inline-block;
  }

  /* カテゴリー別の色分け */
  .category-info[data-category="web"]::first-letter {
    color: var(--category-web);
  }

  .category-info[data-category="photo"]::first-letter {
    color: var(--category-photo);
  }

  .category-info[data-category="stroll"]::first-letter {
    color: var(--category-stroll);
  }

  .category-info[data-category="succulent"]::first-letter {
    color: var(--category-succulent);
  }

  .category-info span {
    font-size: 1.3rem;
    vertical-align: middle;
    margin-left: 0.5em;
  }

  /* 記事本体 */
  .header-wrapper{
    background-color: var(--main-color);
    padding: 15px 0 20px;
    margin-top: 80px;
  }

  .post-navigation a{
   
  }

  /* 記事下のナビゲーション */
  .post-navigation {
    margin-top: 100px;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 15px;
  }

  .post-navigation a {
    color: var(--text-color);
    font-size: 1.5rem;
    font-weight: 300;
    display: block;
    padding: 10px 0 5px;
    margin: 0 15px;
    border-bottom: 1px solid transparent;
    color: var(--text-color);
    text-decoration: none;
    opacity: 1;
    transition: opacity 0.3s;
  }

  .post-navigation a:hover {
    opacity: 0.5;
  }
  
</style>
