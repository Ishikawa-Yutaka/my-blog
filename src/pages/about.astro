---
// src/pages/about.astro
import Layout from '../layouts/Layout.astro';
import HeaderNavi from '../components/HeaderNavi.astro';
import Footer from '../components/Footer.astro';
import Timeline from '../components/Timeline.astro'
import { getPath } from '../env';
---

<Layout title="プロフィール">
  <HeaderNavi slot="header" />

  <div class="page-container">
		<h1 class="page-title">About</h1>
		<div class="profile">
			<img src= {getPath('images/profile.png')} alt="{myName}" class="profile-image">
			<div class="profile-info">
				<h2 class="profile-name">石川 裕</h2>
				<p class="job-title">ishikawa yutaka</p>
			</div>
		</div>

    <div class="introduction-wrap">
      <section class="introduction">
        <h3>プロフィール</h3>
        <p>1977年生まれ　島根県出身</p>
        <p>グループ企業のホームーページ担当を経て、2024年から個人でWebサイト制作を行っている</p>
      </section>

      <section class="experience">
        <h3>経歴</h3>
        <Timeline date="2024-2025年" title="副業を始める">
          <p>副業で地元企業のWebサイト制作を始める</p>
        </Timeline>

        <Timeline date="2019-2023年" title="企業のホームーページ担当">
          <p>グループ企業のホームーページの制作と管理を行う</p>
        </Timeline>

        <Timeline date="2018-2019年" title="ホームーページ制作を学ぶ">
          <p>ホームーページを制作を学ぶ</p>
        </Timeline>
      </section>
    </div>
	</div>

  <Footer slot="footer" />
</Layout>

<style>
/* プロフィール */
  .page-container{
    margin: 0 4vw;
    padding: 3em 1vw;
    font-family:"IBM Plex Sans JP", sans-serif;
  }

  .page-title{
    font-size:5rem;
    text-align:center;
    font-weight:100;
    margin-bottom:1em;
  }

  .page-title::first-letter{
    font-size:calc(5rem * 1.2);
    color: var(--accent-color);
  }

  .profile {
		display: flex;
		align-items: center;
    justify-content: center;
		margin-bottom: 3rem;
	}

  .profile-name{
    font-family:"IBM Plex Sans JP", sans-serif;
    letter-spacing: 0.08em;
  }

	.profile-image {
		width: 150px;
		height: 150px;
		border-radius: 50%;
		object-fit: cover;
		margin-right: 2rem;
	}
    
  .profile-info{
    text-align:center;
  }

	.profile-info h2{
		font-size: 3rem;
    font-weight:400;
	}

	.job-title{
		font-size: 1.4rem;
		color: var(--text-color);
		margin-bottom: 0;
	}

  .introduction-wrap{
    margin:auto;
    width :100%;
    max-width:700px;
    background-color:var(--main-color);
    padding: 4em;
    border-radius: 15px;
    box-shadow: 2px 2px 4px var(--usually-gray);
  }

	section{
		margin-bottom: 3rem;
	}

	h3{
		font-size: 2.4rem;
    font-weight: 500;
		color: var(--text-color);
    position: relative;
    padding-left: 0.55em;
	}

  h3::before{
    content: "";
    display: block;
    width: 3px;
    height: 21px;
    position: absolute;
    top: 8px;
    left: 0;
    background-color: var(--accent-color);
  }


  p{
    font-size:1.6rem;
    font-weight:300;
  }

	@media (max-width: 720px) {
    .profile{
      flex-direction: column;
      align-items: center;
    }

    .profile-image{
      width: 120px;
      height: 120px;
      margin-right: 0;
      margin-bottom: 1.5rem;
      }

    /* フェードインアニメーション*/
    .introduction-wrap{
        position: relative;
        opacity: 0;
        transform: translateY(40px);
        transition:
        opacity 0.7s ease-out,
        transform 0.7s ease-out;
    }
   
    .introduction-wrap.fade-in {
        opacity:1;
        transform: translateY(0);
        transition-delay: 0.5s; 
      }
   }

   @media (max-width:450px){
        .introduction-wrap{
            padding:4em 2em;
        }
    }
</style>

<script>
  window.addEventListener('DOMContentLoaded', () => {
      //as NodeListOf<HTMLElement>で型を指定（typescript）
      const timelineItems = document.querySelectorAll('.introduction-wrap') as NodeListOf<HTMLElement>
      //IntersectionObserverで要素が画面に入った時にfade-inクラスを追加
      const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
              if(entry.isIntersecting){
                  entry.target.classList.add('fade-in');
                  //要素が画面に入ったらobserverでの監視を解除
                  observer.unobserve(entry.target);
              }
          });
          { threshold: 0.5 }
      });
      //各要素にobserverを設定
      timelineItems.forEach((item) => {
          observer.observe(item);
      });
  });
</script>
